// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/goweb4/book/usecase (interfaces: BookUsecase)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	book "github.com/goweb4/book"
)

// MockBookUsecase is a mock of BookUsecase interface
type MockBookUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockBookUsecaseMockRecorder
}

// MockBookUsecaseMockRecorder is the mock recorder for MockBookUsecase
type MockBookUsecaseMockRecorder struct {
	mock *MockBookUsecase
}

// NewMockBookUsecase creates a new mock instance
func NewMockBookUsecase(ctrl *gomock.Controller) *MockBookUsecase {
	mock := &MockBookUsecase{ctrl: ctrl}
	mock.recorder = &MockBookUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBookUsecase) EXPECT() *MockBookUsecaseMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockBookUsecase) Create(arg0, arg1 string, arg2 int64) (*book.Book, error) {
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2)
	ret0, _ := ret[0].(*book.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockBookUsecaseMockRecorder) Create(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBookUsecase)(nil).Create), arg0, arg1, arg2)
}

// Delete mocks base method
func (m *MockBookUsecase) Delete(arg0 int64) error {
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockBookUsecaseMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockBookUsecase)(nil).Delete), arg0)
}

// Fetch mocks base method
func (m *MockBookUsecase) Fetch(arg0, arg1 int64) ([]*book.Book, error) {
	ret := m.ctrl.Call(m, "Fetch", arg0, arg1)
	ret0, _ := ret[0].([]*book.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch
func (mr *MockBookUsecaseMockRecorder) Fetch(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockBookUsecase)(nil).Fetch), arg0, arg1)
}

// GetByID mocks base method
func (m *MockBookUsecase) GetByID(arg0 int64) (*book.Book, error) {
	ret := m.ctrl.Call(m, "GetByID", arg0)
	ret0, _ := ret[0].(*book.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID
func (mr *MockBookUsecaseMockRecorder) GetByID(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockBookUsecase)(nil).GetByID), arg0)
}

// GetByName mocks base method
func (m *MockBookUsecase) GetByName(arg0 string) ([]*book.Book, error) {
	ret := m.ctrl.Call(m, "GetByName", arg0)
	ret0, _ := ret[0].([]*book.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName
func (mr *MockBookUsecaseMockRecorder) GetByName(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockBookUsecase)(nil).GetByName), arg0)
}

// Update mocks base method
func (m *MockBookUsecase) Update(arg0 int64, arg1, arg2 string) (*book.Book, error) {
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(*book.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockBookUsecaseMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockBookUsecase)(nil).Update), arg0, arg1, arg2)
}

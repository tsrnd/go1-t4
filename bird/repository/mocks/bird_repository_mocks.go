// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/goweb4/bird/repository (interfaces: BirdRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	bird "github.com/goweb4/bird"
	reflect "reflect"
)

// MockBirdRepository is a mock of BirdRepository interface
type MockBirdRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBirdRepositoryMockRecorder
}

// MockBirdRepositoryMockRecorder is the mock recorder for MockBirdRepository
type MockBirdRepositoryMockRecorder struct {
	mock *MockBirdRepository
}

// NewMockBirdRepository creates a new mock instance
func NewMockBirdRepository(ctrl *gomock.Controller) *MockBirdRepository {
	mock := &MockBirdRepository{ctrl: ctrl}
	mock.recorder = &MockBirdRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBirdRepository) EXPECT() *MockBirdRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockBirdRepository) Create(arg0, arg1, arg2 string) (int64, error) {
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockBirdRepositoryMockRecorder) Create(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBirdRepository)(nil).Create), arg0, arg1, arg2)
}

// GetByID mocks base method
func (m *MockBirdRepository) GetByID(arg0 int64) (*bird.Bird, error) {
	ret := m.ctrl.Call(m, "GetByID", arg0)
	ret0, _ := ret[0].(*bird.Bird)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID
func (mr *MockBirdRepositoryMockRecorder) GetByID(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockBirdRepository)(nil).GetByID), arg0)
}

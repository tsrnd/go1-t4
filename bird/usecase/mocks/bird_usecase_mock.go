// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/goweb4/bird/usecase (interfaces: BirdUsecase)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	bird "github.com/goweb4/bird"
	reflect "reflect"
)

// MockBirdUsecase is a mock of BirdUsecase interface
type MockBirdUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockBirdUsecaseMockRecorder
}

// MockBirdUsecaseMockRecorder is the mock recorder for MockBirdUsecase
type MockBirdUsecaseMockRecorder struct {
	mock *MockBirdUsecase
}

// NewMockBirdUsecase creates a new mock instance
func NewMockBirdUsecase(ctrl *gomock.Controller) *MockBirdUsecase {
	mock := &MockBirdUsecase{ctrl: ctrl}
	mock.recorder = &MockBirdUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBirdUsecase) EXPECT() *MockBirdUsecaseMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockBirdUsecase) Create(arg0, arg1, arg2 string) (*bird.Bird, error) {
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2)
	ret0, _ := ret[0].(*bird.Bird)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockBirdUsecaseMockRecorder) Create(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBirdUsecase)(nil).Create), arg0, arg1, arg2)
}

// GetByID mocks base method
func (m *MockBirdUsecase) GetByID(arg0 int64) (*bird.Bird, error) {
	ret := m.ctrl.Call(m, "GetByID", arg0)
	ret0, _ := ret[0].(*bird.Bird)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID
func (mr *MockBirdUsecaseMockRecorder) GetByID(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockBirdUsecase)(nil).GetByID), arg0)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/goweb4/class/usecase (interfaces: ClassUsecase)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	class "github.com/goweb4/class"
	reflect "reflect"
)

// MockClassUsecase is a mock of ClassUsecase interface
type MockClassUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockClassUsecaseMockRecorder
}

// MockClassUsecaseMockRecorder is the mock recorder for MockClassUsecase
type MockClassUsecaseMockRecorder struct {
	mock *MockClassUsecase
}

// NewMockClassUsecase creates a new mock instance
func NewMockClassUsecase(ctrl *gomock.Controller) *MockClassUsecase {
	mock := &MockClassUsecase{ctrl: ctrl}
	mock.recorder = &MockClassUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClassUsecase) EXPECT() *MockClassUsecaseMockRecorder {
	return m.recorder
}

// CreateClass mocks base method
func (m *MockClassUsecase) CreateClass(arg0 string, arg1 int) error {
	ret := m.ctrl.Call(m, "CreateClass", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateClass indicates an expected call of CreateClass
func (mr *MockClassUsecaseMockRecorder) CreateClass(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClass", reflect.TypeOf((*MockClassUsecase)(nil).CreateClass), arg0, arg1)
}

// DeleteClass mocks base method
func (m *MockClassUsecase) DeleteClass(arg0 int) error {
	ret := m.ctrl.Call(m, "DeleteClass", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClass indicates an expected call of DeleteClass
func (mr *MockClassUsecaseMockRecorder) DeleteClass(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClass", reflect.TypeOf((*MockClassUsecase)(nil).DeleteClass), arg0)
}

// GetClassById mocks base method
func (m *MockClassUsecase) GetClassById(arg0 int) (class.Class, error) {
	ret := m.ctrl.Call(m, "GetClassById", arg0)
	ret0, _ := ret[0].(class.Class)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClassById indicates an expected call of GetClassById
func (mr *MockClassUsecaseMockRecorder) GetClassById(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClassById", reflect.TypeOf((*MockClassUsecase)(nil).GetClassById), arg0)
}

// UpdateClass mocks base method
func (m *MockClassUsecase) UpdateClass() error {
	ret := m.ctrl.Call(m, "UpdateClass")
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateClass indicates an expected call of UpdateClass
func (mr *MockClassUsecaseMockRecorder) UpdateClass() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClass", reflect.TypeOf((*MockClassUsecase)(nil).UpdateClass))
}
